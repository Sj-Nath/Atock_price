library(tidyquant) # To download the data
library(tidyr)
library(plotly) # To create interactive charts
library(timetk) # To manipulate the data series

tick<-c('INFY.NS','RELIANCE.NS','ICICIBANK.NS','SBIN.NS','ITC.NS')


price_data <- tq_get(tick,
                     from = '2014-01-01',
                     to = '2023-7-7',
                     get = 'stock.prices')

log_ret_tidy <- price_data %>%
  group_by(symbol) %>%
  tq_transmute(select = adjusted,
               mutate_fun = periodReturn,
               period = 'daily',
               col_rename = 'ret',
               type = 'log')

head(log_ret_tidy)


log_ret_xts <-log_ret_tidy%>%
  spread(symbol, value = ret) %>%
  tk_xts()



head(log_ret_xts)


plot(log_ret_xts[,"ITC.NS"], main = "ITC", col = "steelblue")



mean_ret <- colMeans(log_ret_xts)
print(round(mean_ret, 5))

cov_mat <- cov(log_ret_xts) * 252
print(round(cov_mat,4))
library("PerformanceAnalytics")
library("zoo")
install.packages("fPortfolio")
library(fPortfolio)

summary(log_ret_xts)
basicStats(log_ret_xts)

ITC <- 100*log_ret_xts[, "ITC.NS"]
skewness(ITC)
INFY<-100*log_ret_xts[,"INFY.NS"]
skewness(INFY)
library(fPortfolio)
library(FRAPO)

logret3 <- 100 * log_ret_xts[, 1:3]
head(logret3)
covRisk(logret3, weights = c(1, 1, 1)/3)

####VaR is defined as the predicted worst-case loss with a specific confidence
####level (for example, 95%) over a period of time (for example, one day)
varRisk(logret3, weights = c(1, 1, 1)/3, alpha = 0.05)

cvarRisk(logret3, weights = c(1, 1, 1)/3, alpha = 0.05)



wts <- runif(n = length(tick))
print(wts)

print(sum(wts))

wts <- wts/sum(wts)
print(wts)

sum(wts)
port_returns <- (sum(wts * mean_ret) + 1)^252 - 1

port_risk <- sqrt(t(wts) %*% (cov_mat %*% wts))
print(port_risk)

sharpe_ratio<- port_returns/port_risk
print(sharpe_ratio)


print(wts)

library(PortfolioAnalytics)
library(FRAPO)
######GLobal minimum variance portfolio###

p1<-PGMV(log_ret_xts, percentage=FALSE,optctrl=ctrl())
p1
####Portfolio return
pgmvret<-sum(Weights(p1)*mean_ret)
pgmvret

pgmvret_annual <- ((pgmvret + 1)^252) - 1
pgmvret_annual

###Covariance
a1<-Weights(p1)%*% cov(log_ret_xts)
a1

t(Weights(p1))
varPGMV<-sum(Weights(p1)*a1)

stdevPGMV<-sqrt(varPGMV)
stdevPGMV


############VaR###########
varRisk(log_ret_xts, weights = Weights(p1), alpha = 0.05)


#######Most diversified portfolio

p2<-PMD(log_ret_xts,percentage=FALSE,optctrl=ctrl())
p2

a2<-Weights(p2)%*% cov(log_ret_xts)
a2
varPMD<-sum(Weights(p2)*a2)
stdevPMD<-sqrt(varPMD)
stdevPMD

######Tail dependence

tdc(log_ret_xts, method="EmpTC",lower=TRUE)
cor(log_ret_xts)

p3<-PMTD(log_ret_xts,method="EmpTC", percentage=FALSE,optctrl=ctrl())
p3

a3<-Weights(p3)%*% cov(log_ret_xts)
a3
varPMTD<-sum(Weights(p3)*a3)
stdevPMTD<-sqrt(varPMTD)
stdevPMTD



tdc(log_ret_xts, method="EVT",lower=TRUE)

p4<-PMTD(log_ret_xts,method="EVT", percentage=FALSE,optctrl=ctrl())
p4

p5<-PERC(cov(log_ret_xts),percentage=TRUE, optctrl = ctrl())
a5<-Weights(p5)%*% cov(log_ret_xts)
a5
varPERC<-sum(Weights(p5)*a5)
stdevPERC<-sqrt(varPERC)
stdevPERC

GMVw <- Weights(PGMV(log_ret_xts))
MDPw <- Weights(PMD(log_ret_xts))
MTDw <- Weights(PMTD(log_ret_xts))
ERCw<-Weights(p5)

## Graphical displays of allocations
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2, 2))
dotchart(GMVw, xlim = c(0, 40), main = "GMV Allocation", pch = 19)
dotchart(MDPw - GMVw, xlim = c(-20, 20), main = "MDP vs. GMV", pch = 19)
abline(v = 0, col = "gray")
dotchart(MTDw - GMVw, xlim = c(-20, 20), main = "MTD vs. GMV", pch = 19)
abline(v = 0, col = "gray")
dotchart(ERCw - GMVw, xlim = c(-20, 20), main = "ERC vs. GMV", pch = 19)
abline(v = 0, col = "gray")
par(oldpar)



######To generate Efficient frontier##########

num_port <- 5000

# Creating a matrix to store the weights


all_wts <- matrix(nrow = num_port,
                  ncol = length(tick))

# Creating an empty vector to store
# Portfolio returns

port_returns <- vector('numeric', length = num_port)

# Creating an empty vector to store
# Portfolio Standard deviation

port_risk <- vector('numeric', length = num_port)

# Creating an empty vector to store
# Portfolio Sharpe Ratio

sharpe_ratio <- vector('numeric', length = num_port)

for (i in seq_along(port_returns)) {
  
  wts <- runif(length(tick))
  wts <- wts/sum(wts)
  
  # Storing weight in the matrix
  all_wts[i,] <- wts
  
  # Portfolio returns
  
  port_ret <- sum(wts * mean_ret)
  port_ret <- ((port_ret + 1)^252) - 1
  
  # Storing Portfolio Returns values
  port_returns[i] <- port_ret
  
  
  # Creating and storing portfolio risk
  port_sd <- sqrt(t(wts) %*% (cov_mat  %*% wts))
  port_risk[i] <- port_sd
  
  # Creating and storing Portfolio Sharpe Ratios
  # Assuming 0% Risk free rate
  
  sr <- port_ret/port_sd
  sharpe_ratio[i] <- sr
  
}

# Storing the values in the table
portfolio_values <- tibble(Return = port_returns,
                           Risk = port_risk,
                           SharpeRatio = sharpe_ratio)


# Converting matrix to a tibble and changing column names
all_wts <- tk_tbl(all_wts)

colnames(all_wts) <- colnames(log_ret_xts)

# Combing all the values together
portfolio_values <- tk_tbl(cbind(all_wts, portfolio_values))

head(portfolio_values)

min_var <- portfolio_values[which.min(portfolio_values$Risk),]
max_sr <- portfolio_values[which.max(portfolio_values$SharpeRatio),]



#install.packages("forcats")
library(forcats)


#####Gives weights in min variance portfolio###

p <- min_var %>%
  gather(INFY.NS:ITC.NS, key = Asset,
         value = Weights) %>%
  mutate(Asset = as.factor(Asset)) %>%
  ggplot(aes(x = fct_reorder(Asset,Weights), y = Weights, fill = Asset)) +
  geom_bar(stat = 'identity') +
  theme_minimal() +
  labs(x = 'Assets', y = 'Weights', title = "Minimum Variance Portfolio Weights") +
  scale_y_continuous(labels = scales::percent) 

ggplotly(p)


####GIves weights in the tangency portfolio######
p <- max_sr %>%
  gather(INFY.NS:ITC.NS, key = Asset,
         value = Weights) %>%
  mutate(Asset = as.factor(Asset)) %>%
  ggplot(aes(x = fct_reorder(Asset,Weights), y = Weights, fill = Asset)) +
  geom_bar(stat = 'identity') +
  theme_minimal() +
  labs(x = 'Assets', y = 'Weights', title = "Tangency Portfolio Weights") +
  scale_y_continuous(labels = scales::percent) 

ggplotly(p)

p <- portfolio_values %>%
  ggplot(aes(x = Risk, y = Return, color = SharpeRatio)) +
  geom_point() +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  scale_x_continuous(labels = scales::percent) +
  labs(x = 'Annualized Risk',
       y = 'Annualized Returns',
       title = "Portfolio Optimization & Efficient Frontier") +
  geom_point(aes(x = Risk,
                 y = Return), data = min_var, color = 'red') +
  geom_point(aes(x = Risk,
                 y = Return), data = max_sr, color = 'red') +
  annotate('text', x = 0.20, y = 0.42, label = "Tangency Portfolio") +
  annotate('text', x = 0.18, y = 0.01, label = "Minimum variance portfolio") +
  annotate(geom = 'segment', x = 0.14, xend = 0.135,  y = 0.01, 
           yend = 0.06, color = 'red', arrow = arrow(type = "open")) +
  annotate(geom = 'segment', x = 0.22, xend = 0.2275,  y = 0.405, 
           yend = 0.365, color = 'red', arrow = arrow(type = "open"))


ggplotly(p)

